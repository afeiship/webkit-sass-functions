/*black Start*/
@function black($opacity) {
  @return rgba(black, $opacity);
}
/*black End*/

/*debug Start*/
@function debug($list) {
  $result: #{"[ "};

  @each $item in $list {
    @if length($item) > 1 {
      $result: $result#{debug($item)};
    }
    @else {
      $result: $result#{$item};
    }
    @if index($list, $item) != length($list) {
      $result: $result#{", "};
    }
  }

  $result: $result#{" ]"};

  @return $result;
}
/*debug End*/

/*first Start*/
@function first($list) {
  @return nth($list, 1);
}
/*first End*/

/*generate-list Start*/
@function generate-list( $from:0, $to:9 ) {
  $list: ();
  @for $i from $from through $to {
    $list: append($list, $i);
  }
  @return $list;
}
/*generate-list End*/

/*last Start*/
@function last($list) {
  @return nth($list, length($list));
}
/*last End*/

/*purge Start*/
@function purge($list) {
  $result: ();

  @each $item in $list {
    @if $item != null
    and $item != false
    and $item != "" {
      $result: append($result, $item);
    }
  }

  @return $result;
}
/*purge End*/

/*rem Start*/
@function to-rem-value($inValue,$rem) {
  @if $rem == px {
    @return #{$inValue}px;
  } @else {
    @return #{$inValue/$rem}rem;
  }
}

/*rem End*/

/*remove-duplicates Start*/
@function remove-duplicates($list, $recursive: false) {
  $result: ();

  @each $item in $list {
    @if not index($result, $item) {
      @if length($item) > 1 and $recursive {
        $result: append($result, remove-duplicates($item, $recursive));
      }
      @else {
        $result: append($result, $item);
      }
    }
  }

  @return $result;
}
/*remove-duplicates End*/

/*rpx Start*/
@function to-rpx-value($inValue) {
  @return #{$inValue/2}rpx;
}

/*rpx End*/

/*strip-units Start*/
@function strip-units($inNumber){
	@return $inNumber / ($inNumber * 0 + 1);
}
/*strip-units End*/
