/*!
 * name: @jswork/wsui-functions
 * description: Webkit sass functions.
 * homepage: https://github.com/afeiship/wsui-functions
 * version: 1.0.1
 * date: 2020-11-28 16:14:04
 * license: MIT
 */

/*last Start*/
@function at($list, $target) {
  $type: typeof($target);
  @if $target == first {
    @return nth($list, $n: 1);
  }

  @if $target == last {
    @return nth($list, length($list));
  }

  @return nth($list, $target - 1);
}
/*last End*/

/*dynamic-text-color Start*/
// http://thesassway.com/intermediate/dynamically-change-text-color-based-on-its-background-with-sass

@function dynamic-color($color) {
  @if (lightness($color) > 50) {
    @return #000000; // Lighter backgorund, return dark color
  } @else {
    @return #ffffff; // Darker background, return light color
  }
}
/*dynamic-text-color End*/


// @thanks to: https://css-tricks.com/snippets/sass/power-function/
@function pow($in-value, $in-exp) {
  $value: 1;
  $exponent: abs($in-exp);

  @for $i from 1 through $exponent {
    $value: $value * $in-value;
  }

  @if $in-exp > 0 {
    @return $value;
  } @else {
    @return 1 / $value;
  }
}

/*range Start*/
@function range($from: 0, $to: 9) {
  $list: ();
  @for $i from $from through $to {
    $list: append($list, $i);
  }
  @return $list;
}
/*range End*/

/*rempx Start*/
@function rem($value, $rem: 50) {
  @if $rem == px {
    @return #{$value}px;
  } @else {
    @return #{$value/$rem}rem;
  }
}
/*rem End*/

/*remove-duplicates Start*/
@function remove-duplicates($list, $recursive: false) {
  $result: ();

  @each $item in $list {
    @if not index($result, $item) {
      @if length($item) > 1 and $recursive {
        $result: append($result, remove-duplicates($item, $recursive));
      }
      @else {
        $result: append($result, $item);
      }
    }
  }

  @return $result;
}
/*remove-duplicates End*/

// https://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
@function slice($list, $start: 1, $end: length($list)) {
  $result: null;

  @if type-of($start) != number or type-of($end) != number {
    @warn "Either $start or $end are not a number for `slice`.";
  } @else if $start > $end {
    @warn "The start index has to be lesser than or equals to the end index for `slice`.";
  } @else if $start < 1 or $end < 1 {
    @warn "List indexes must be non-zero integers for `slice`.";
  } @else if $start > length($list) {
    @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
  } @else if $end > length($list) {
    @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
  } @else {
    $result: ();

    @for $i from $start through $end {
      $result: append($result, nth($list, $i));
    }
  }
  @return $result;
}

// square root function using the Babylonian method
// https://gist.github.com/ryanjafari/bf752b6ef52726352239
// http://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method
@function sqrt($square, $tolerance: 0.001, $estimate: $square/2) {
  @if abs($square - $estimate * $estimate) < $tolerance {
    @return $estimate;
  }

  @return sqrt($square, $tolerance, ($estimate + $square/$estimate)/2);
}

// https://stackoverflow.com/questions/32376461/how-to-split-a-string-into-two-lists-of-numbers-in-sass

@function str-split($string, $separator) {
  // empty array/list
  $split-arr: ();
  // first index of separator in string
  $index: str-index($string, $separator);
  // loop through string
  @while $index != null {
    // get the substring from the first character to the separator
    $item: str-slice($string, 1, $index - 1);
    // push item to array
    $split-arr: append($split-arr, $item);
    // remove item and separator from string
    $string: str-slice($string, $index + 1);
    // find new index of separator
    $index: str-index($string, $separator);
  }
  // add the remaining string to list (the last item)
  $split-arr: append($split-arr, $string);

  @return $split-arr;
}

/*strip-units Start*/
// https://css-tricks.com/snippets/sass/strip-unit-function/
@function strip-units($num) {
  @return $num / ($num * 0 + 1);
}
/*strip-units End*/

/*map-deep-get Start*/

// https://www.sitepoint.com/extra-map-functions-sass/
// https://codepen.io/jakealbaugh/post/using-sass-functions-to-access-complex-variable-maps

@function get($map, $path) {
  $keys: str-split($path, ".");
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}
/*map-deep-get End*/
